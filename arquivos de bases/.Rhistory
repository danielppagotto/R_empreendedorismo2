summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~  + continent +
regulatory_quality  +
rule_of_law ,
data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~ corruption + continent +
+
rule_of_law ,
data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
modelo <- lm(tea ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
#Juntando bases
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code"))
modelo <- lm(high_job_creation_expectation ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
plot(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + political_stability, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
plot(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + regulatory_quality, data = gem_wgid)
summary(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption + continent
, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
plot(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + gov_effectiveness, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + political_stability, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
plot(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + voice_accountability, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
gem_especialistas_2019 <- gem_especialistas %>%
filter(year == 2019)
#Juntando bases
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code")) %>%
left_join(gem_especialistas_2019, by = "cod_pais")
#Juntando bases
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code")) %>%
left_join(gem_especialistas_2019, by = "code")
#Juntando bases
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code")) %>%
left_join(gem_especialistas_2019, by = c("code" = "cod_pais"))
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code"))
gem_wgid%>%
left_join(gem_especialistas_2019, by = c("code" = "cod_pais"))
gem_wgid%>%
left_join(gem_especialistas_2019, by = c("cod_pais" = "code"))
total <- gem_wgid%>%
left_join(gem_especialistas_2019, by = c("cod_pais" = "code"))
View(total)
modelo <- lm(female_male_tea ~ corruption + taxes_bureaucracy +
rule_of_law +  , data = total)
modelo <- lm(female_male_tea ~ corruption + taxes_bureaucracy +
rule_of_law  , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + basic_school_entrepreneurship  , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + , data = total)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
modelo <- lm(tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(high_status_successful_entrepreneurs ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(high_job_creation_expectation ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(fear_failure ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
modelo <- lm(fear_failure ~ gov_programs + taxes_bureaucracy +
gov_support + financing + physical_infrastructure + continent , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + physical_infrastructure +
continent , data = total)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + physical_infrastructure +
, data = total)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + physical_infrastructure, data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + physical_infrastructure +
continent , data = total)
summary(modelo)
library(tidyverse)
library(devtools)
library(ggplot2)
library(survey)
library(PNSIBGE)
# Definindo opcao de exibicao de numeros sem exponencial
aviso <- getOption("warn")
options(warn=-1)
options(scipen=999)
options(warn=aviso)
rm(aviso)
# Limpando arquivos armazenados na memoria
rm(list=ls(all=TRUE))
variaveis_selecionadas <- c("Q00201", "Q03001", "P00404", "P00104", "N00101", "N001","J012", "J01101", "J01002", "J007", "J00101", "J001",
"J00404", "I00102", "J002", "B001", "B003", "C006","C008","C009", "E01602","E01501", "E01601",
"E017", "V0001", "V0015", "V0031", "B001", "C001", "C00301", "C004", "C006", "C008", "C009", "D00901",
"E001", "E002", "E003", "E004", "E005", "E006011", "E008", "E01201", "E01401", "E014011",
"E01402", "E01403", "E01501", "E01601", "E01602", "E017", "E01801", "E01802", "E01805",
"E019", "E022", "E023011", "E024011", "I00102", "I005", "I006", "I00401", "I00402", "I00403",
"I00404", "J001", "J00101", "J00402", "J00404", "J007", "J00801", "J009", "J01002", "J01101",
"J012", "J037", "J038", "J041", "J05301", "J057", "J01301", "N010", "N011", "N012", "N013", "N014", "N015", "N016",
"N017", "N018", "Q092", "Q09201", "Q09301", "Q094", "Q09502", "Q09605", "Q09606", "Q10101",
"Q10202", "Q105", "Q10701", "Q109", "Q11006", "Q11007", "Q11008", "Q11009", "Q11010", "Q111",
"Q11201", "Q11406", "Q11408", "Q115", "P02801", "P03001", "P035", "P050", "P067", "P052", "P05401",
"Q060", "Q06306", "Q068", "Q074", "Q079", "Q088", "Q11604", "Q120", "Q124", "VDD004A")
dadospns <- get_pns(year=2019, labels=TRUE, deflator=TRUE, design=TRUE, vars=variaveis_selecionadas)
tpc <- subset(dadospns, E01401 == "Conta própria")
empregador <- subset(dadospns, E01401 == "Empregador")
empregado <- subset(dadospns, E01403 == "Sim")
tpc_sul <- subset(tpc, V0001 == "Paraná" | V0001 == "Santa Catarina" | V0001 == "Rio Grande do Sul")
tpc_norte <- subset(tpc, V0001 == "Rondônia" | V0001 == "Acre" | V0001 == "Amazonas" | V0001 == "Roraima" |
V0001 == "Pará" | V0001 == "Amapá" | V0001 == "Tocantins")
tpc_nordeste <- subset(tpc, V0001 == "Maranhão" | V0001 == "Piauí" | V0001 == "Ceará" |
V0001 == "Rio Grande do Norte" | V0001 == "Paraíba" | V0001 == "Pernambuco" |
V0001 == "Alagoas" | V0001 == "Sergipe" | V0001 == "Bahia")
tpc_sudeste <- subset(tpc, V0001 == "Minas Gerais" | V0001 == "Espírito Santo" | V0001 == "Rio de Janeiro" |
V0001 == "São Paulo")
tpc_centro_oeste <- subset(tpc, V0001 == "Mato Grosso do Sul" | V0001 == "Mato Grosso" | V0001 == "Goiás" |
V0001 == "Distrito Federal")
empregado <- subset(dadospns, E01401 == "Empregado do setor privado") # aqui tem que pegar
View(empregado)
empregado_sul <- subset(empregado, V0001 == "Paraná" | V0001 == "Santa Catarina" | V0001 == "Rio Grande do Sul")
empregado_norte <- subset(empregado, V0001 == "Rondônia" | V0001 == "Acre" | V0001 == "Amazonas" | V0001 == "Roraima" |
V0001 == "Pará" | V0001 == "Amapá" | V0001 == "Tocantins")
empregado_nordeste <- subset(empregado, V0001 == "Maranhão" | V0001 == "Piauí" | V0001 == "Ceará" |
V0001 == "Rio Grande do Norte" | V0001 == "Paraíba" | V0001 == "Pernambuco" |
V0001 == "Alagoas" | V0001 == "Sergipe" | V0001 == "Bahia")
empregado_sudeste <- subset(empregado, V0001 == "Minas Gerais" | V0001 == "Espírito Santo" | V0001 == "Rio de Janeiro" |
V0001 == "São Paulo")
empregado_centro_oeste <- subset(empregado, V0001 == "Mato Grosso do Sul" | V0001 == "Mato Grosso" | V0001 == "Goiás" |
V0001 == "Distrito Federal")
htpc <- subset(tpc, C006 == "Homem")
mtpc <- subset(tpc, C006 == "Mulher")
#Empregador
hempregador <- subset(empregador, C006 == "Homem")
mempregador <- subset(empregador, C006 == "Mulher")
#Empregado
hempregado <- subset(empregado, C006 == "Homem")
mempregado <- subset(empregado, C006 == "Mulher")
id1_sul_tpc <- svymean(~J01101, tpc_sul, na.rm = TRUE)
id1_sul_tpc
id2tpc_goias <- svymean(~J01301, tpc_goias, na.rm = TRUE)
id2tpc_goias
tpc_sem_instrucao <- subset(tpc, VDD004A == "Sem instrução")
tpc_fund_incomp <- subset(tpc, VDD004A == "Fundamental incompleto ou equivalente")
tpc_fund_comp <- subset(tpc, VDD004A == "Fundamental completo ou equivalente")
tpc_medio_incomp <- subset(tpc, VDD004A == "Médio incompleto ou equivalente")
tpc_medio_comp <- subset(tpc, VDD004A == "Médio completo ou equivalente")
tpc_sup_incomp <- subset(tpc, VDD004A == "Superior incompleto ou equivalente")
tpc_sup_comp <- subset(tpc, VDD004A == "Superior completo")
dadospns_df <- as.data.frame(dadospns)
View(tpc_sem_instrucao)
library(ggrepel)
library(srvyr); library(tidyverse); library(vroom); library(readxl); library(patchwork);
tipotrabalho_sexo <- dadospns %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
teste <- as_survey_design(dadospns)
tipotrabalho_sexo <- teste %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
View(tipotrabalho_sexo)
tipotrabalho_sexo <- teste %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria") %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
View(tipotrabalho_sexo)
View(teste)
tipotrabalho_sexo2 <- teste %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria") %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
tipotrabalho_sexo_uf <- teste %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria") %>%
group_by(V001, E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
tipotrabalho_sexo_uf <- teste %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria") %>%
group_by(V0001, E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
View(tipotrabalho_sexo2)
tipotrabalho_sexo2 <- teste %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total()) %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria")
View(tipotrabalho_sexo2)
install.packages("sparklyr")
library(sparklyr)
spark_install(version = "2.1.0")
sc <- spark_connect(master = "local")
sc <- spark_connect(master = "local")
sc <- spark_connect(master = "local")
spark_installed_versions()
sc <- spark_connect(master = "local", version = "2.1.0")
sc <- spark_connect(master = "local", log = "console",
config = list(sparklyr.verbose = TRUE))
spark_home <- Sys.getenv("SPARK_HOME")
spark_home <- sparklyr::spark_home_dir()
system2(
file.path(spark_home, "bin", "spark-submit"),
c(
"--master", "local",
"--class", "org.apache.spark.examples.SparkPi",
dir(file.path(spark_home, "examples", "jars"),
pattern = "spark-examples", full.names = TRUE),
100),
stderr = FALSE
)
dir(system.file("java", package = "sparklyr"),
pattern = "sparklyr", full.names = T)
sc <- spark_connect(master = "sparklyr://localhost:8880/42", version = "2.3")
sc <- spark_connect(master = "local", version = "2.3")
sc <- spark_connect(master = "local", version = "2.1.0")
library(sparklyr)
sc <- spark_connect(master = "local", version = "2.1.0")
gem_especialistas <- read_delim("https://bit.ly/2YH0ymA", ";", escape_double = FALSE, trim_ws = TRUE)
library(tidyverse)
gem_especialistas <- read_delim("https://bit.ly/2YH0ymA", ";", escape_double = FALSE, trim_ws = TRUE)
gem_especialistas <- read_delim("encurtador.com.br/ovyGT", ";", escape_double = FALSE, trim_ws = TRUE)
wgi <- read_csv("GitHub/R_empreendedorismo2/arquivos de bases/wgi.csv")
View(wgi)
gem_2019_aps <- read_delim("GitHub/R_empreendedorismo2/arquivos de bases/gem_2019_aps.csv",
";", escape_double = FALSE, trim_ws = TRUE)
gem_2019_aps <- read_csv("GitHub/R_empreendedorismo2/arquivos de bases/gem_2019_aps.csv")
View(wgi)
knitr::opts_chunk$set(echo = TRUE)
# carregando pacotes que serão usados
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("GitHub/R_empreendedorismo2/arquivos de bases/wgi.csv")
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
# carregando pacotes que serão usados
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("GitHub/R_empreendedorismo2/arquivos de bases/wgi.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("GitHub/R_empreendedorismo2/arquivos de bases/wgi.csv")
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("GitHub/R_empreendedorismo2/arquivos de bases/wgi.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("GitHub/R_empreendedorismo2/arquivos de bases/wgi.csv")
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("GitHub/R_empreendedorismo2/arquivos de bases/wgi.csv")
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("wgi.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("wgi.csv")
gem_2019_aps <- read_csv("gem_2019_aps.csv")
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
setwd("~/GitHub/R_empreendedorismo2/arquivos de bases")
unlink('~/LAPEI/a_artigo REGEPE/word_mk_cache', recursive = TRUE)
knit_with_parameters('~/LAPEI/a_artigo REGEPE/word_mk.Rmd', encoding = 'UTF-8')
glimpse(wgi)
glimpse(gem_aps)
gem_aps <- read_csv("gem_2019_aps.csv", sep = ";")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("wgi.csv")
gem_aps <- read_csv("gem_2019_aps.csv", sep = ";")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_delim("wgi.csv")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_delim("wgi.csv")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_delim("wgi.csv")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_delim("wgi.csv")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_delim("wgi.csv")
# carregando pacotes que serão usados
library(readr)
library(dplyr) # tratamento de dados
library(ggplot2) # visualização de dados
# lendo os bases de dados por meio da função read_csv
wgi <- read_csv("wgi.csv")
gem_aps <- read_delim("gem_2019_aps.csv", delim = ";")
gem_wgid <- gem_aps %>%
left_join(wgi, by = c("abrev" = "code"))
gem_wgid <- gem_wgid %>%
select(economy, entrepreneurship_as_good_carrer_choice,
rule_of_law, regulatory_quality, political_stability,
voice_accountability)
gem_wgid <- gem_aps %>%
left_join(wgi, by = c("abrev" = "code"))
gem_wgid <- gem_wgid %>%
select(economy, entrepreneurship_as_good_carrer_choice, tea,
rule_of_law, regulatory_quality, political_stability,
voice_accountability)
gem_wgid %>%
skim()
psych::describe(gem_wgid)
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent, size = 1.5)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
theme(legend.position = "none") + theme_minimal()
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent, size = 1.5)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
theme(legend.position = "none") + theme_minimal()
library(ggrepel) # Suporte na visualização
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent, size = 1.5)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
theme(legend.position = "none") + theme_minimal()
gem_wgid <- gem_aps %>%
left_join(wgi, by = c("abrev" = "code"))
gem_wgid <- gem_wgid %>%
select(economy, continent, entrepreneurship_as_good_carrer_choice, tea,
rule_of_law, regulatory_quality, political_stability,
voice_accountability)
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent, size = 1.5)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
theme(legend.position = "none") + theme_minimal()
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent, size = 1.5)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
theme(legend.position = "none") + theme_minimal() +
facet_grid(~continent)
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent, size = 1.5)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
facet_grid(~continent) +
theme(legend.position = "none") + theme_minimal()
geom_point(aes(col = continent) +
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
facet_grid(~continent) +
theme(legend.position = "none") + theme_minimal()
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent, size = 1.5)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
facet_grid(~continent) +
theme(legend.position = "none") + theme_minimal()
gem_wgid %>%
skim()
library(skimr)
gem_wgid %>%
skim()
library(GGally)
gem_wgid %>%
select(-economy,-continent) %>%
ggpairs()
gem_wgid %>%
ggplot(aes(x = political_stability, y = entrepreneurship_as_good_carrer_choice)) +
geom_point(aes(col = continent, size = 1.5)) +
geom_smooth(method = "lm", se = FALSE) +
geom_text_repel(aes(label = economy)) +
facet_grid(~continent) +
theme_minimal() + xlab("Political Stability") +
ylab("Entrepreneurship as a good carrer of choice")
